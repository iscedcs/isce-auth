generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(uuid())
  email                String               @unique
  displayPicture       String?
  identificationType   IdentificationType?
  idNumber             String?              @unique
  password             String
  phone                String               @unique
  address              String?
  dob                  DateTime?
  userType             UserType             @default(USER)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  deletedAt            DateTime?
  associatedBusinessId String?
  businessAddress      String?
  businessName         String?
  deviceId             String?
  firstName            String?
  invitedByUserId      String?
  isBusinessAdmin      Boolean              @default(false)
  lastLogin            DateTime?
  lastName             String?
  position             String?
  isBlocked            Boolean              @default(false)
  isEmailVerified      Boolean              @default(false)
  businessEmail        String?
  business_permissions BusinessPermissions?
  devices              Device[]
  isce_permissions     IscePermissions?
  passwordReset        PasswordReset?
}

model IscePermissions {
  id           String  @id @default(uuid())
  connect      Boolean @default(false)
  connect_plus Boolean @default(false)
  store        Boolean @default(false)
  wallet       Boolean @default(false)
  event        Boolean @default(false)
  access       Boolean @default(false)
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id])
}

model BusinessPermissions {
  id          String  @id @default(uuid())
  invoicing   Boolean @default(false)
  appointment Boolean @default(false)
  chat        Boolean @default(false)
  analytics   Boolean @default(false)
  services    Boolean @default(false)
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
}

model EmailVerify {
  id         String    @id @default(uuid())
  email      String    @unique
  verifyCode String
  isVerified Boolean   @default(false)
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userType   UserType?
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String   @unique
  resetCode String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Device {
  id         String    @id @default(uuid())
  userId     String
  type       String
  productId  String    @unique // Formerly nfcUid
  label      String?
  isActive   Boolean?  @default(true)
  isPrimary  Boolean?  @default(false)
  assignedAt DateTime
  lastUsedAt DateTime?
  user       User      @relation(fields: [userId], references: [id])
  token      Token?
}

model Token {
  id         String    @id @default(uuid())
  token      String    @unique
  assignedTo String    // User email
  used       Boolean   @default(false)
  usedAt     DateTime?
  deviceId   String?   @unique
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  device     Device?   @relation(fields: [deviceId], references: [id])
  // Device information stored in token
  deviceType String?   // Store the device type
  productId  String?   // Store the product ID
  userId     String?   // Store the user ID
}

model Address {
  id          String @id @default(uuid())
  addressText String
  latitude    Float
  longitude   Float
}

model ContactInfo {
  id    String  @id @default(uuid())
  phone String?
  email String?
}

enum PrivacyLevel {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
}

enum UserType {
  USER
  BUSINESS_USER
  ADMIN
  SUPER_ADMIN
  EMPLOYEE
}

enum IdentificationType {
  CAC
  TIN
  BVN
  NIN
}
